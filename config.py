"""
URL Shortener - Konfig√ºrasyon Ayarlarƒ±
Flask uygulamasƒ± i√ßin environment-based konfig√ºrasyon y√∂netimi.

Bu dosya farklƒ± ortamlar (development, production, testing) i√ßin
ayrƒ± konfig√ºrasyonlar saƒülar ve g√ºvenlik best practice'lerini uygular.
"""

import os
import secrets
from datetime import timedelta


class BaseConfig:
    """
    Temel konfig√ºrasyon sƒ±nƒ±fƒ±
    
    T√ºm ortamlar i√ßin ortak ayarlarƒ± i√ßerir.
    Diƒüer konfig√ºrasyon sƒ±nƒ±flarƒ± bundan inherit eder.
    """
    
    # Flask temel ayarlarƒ±
    SECRET_KEY = os.environ.get('SECRET_KEY') or secrets.token_hex(32)
    
    # SQLAlchemy ayarlarƒ±
    SQLALCHEMY_TRACK_MODIFICATIONS = False  # Performance i√ßin kapalƒ±
    SQLALCHEMY_RECORD_QUERIES = False       # Production'da kapalƒ±
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_timeout': 20,
        'pool_recycle': -1,
        'pool_pre_ping': True  # Connection health check
    }
    
    # WTF Form ayarlarƒ±
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = 3600  # 1 saat
    
    # URL Shortener √∂zel ayarlarƒ±
    SHORT_CODE_LENGTH = 6  # Kƒ±sa kod uzunluƒüu (varsayƒ±lan)
    SHORT_CODE_ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    MAX_URL_LENGTH = 2048  # Maksimum URL uzunluƒüu
    CUSTOM_CODE_MAX_LENGTH = 20  # Kullanƒ±cƒ± tanƒ±mlƒ± kod max uzunluk
    
    # Rate limiting (gelecekte implementasyon i√ßin)
    RATELIMIT_ENABLED = True
    RATELIMIT_DEFAULT = "100 per hour"  # IP bazƒ±nda limit
    
    # Cache ayarlarƒ±
    CACHE_TYPE = "simple"  # Development i√ßin basit cache
    CACHE_DEFAULT_TIMEOUT = 300  # 5 dakika
    
    # Session ayarlarƒ±
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_COOKIE_SECURE = False  # HTTP i√ßin False, HTTPS i√ßin True
    SESSION_COOKIE_HTTPONLY = True  # XSS korumasƒ±
    SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF korumasƒ±
    
    # Upload ayarlarƒ± (gelecekte file upload i√ßin)
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size
    
    # Timezone
    TIMEZONE = 'UTC'
    
    # Email ayarlarƒ± (gelecekte notifications i√ßin)
    MAIL_SERVER = os.environ.get('MAIL_SERVER')
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    
    @staticmethod
    def init_app(app):
        """
        Uygulama ba≈ülatƒ±ldƒ±ƒüƒ±nda √ßalƒ±≈üacak konfig√ºrasyon i≈ülemleri
        
        Args:
            app: Flask application instance
        """
        pass


class DevelopmentConfig(BaseConfig):
    """
    Development (Geli≈ütirme) ortamƒ± konfig√ºrasyonu
    
    Debug mode a√ßƒ±k, detaylƒ± loglar, gev≈üek g√ºvenlik ayarlarƒ±.
    """
    
    DEBUG = True
    TESTING = False
    
    # Veritabanƒ± - Local SQLite
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'database_dev.db')
    
    # Development'ta query loglarƒ± a√ßƒ±k
    SQLALCHEMY_RECORD_QUERIES = True
    
    # Gev≈üek g√ºvenlik ayarlarƒ±
    WTF_CSRF_ENABLED = False  # Development'ta CSRF kapalƒ± (opsiyonel)
    
    # Session g√ºvenliƒüi gev≈üek
    SESSION_COOKIE_SECURE = False
    
    # Rate limiting kapalƒ±
    RATELIMIT_ENABLED = False
    
    # Detaylƒ± error sayfalarƒ±
    PROPAGATE_EXCEPTIONS = True
    
    @staticmethod
    def init_app(app):
        """Development-specific initialization"""
        BaseConfig.init_app(app)
        
        # Development'ta detaylƒ± logging
        import logging
        logging.basicConfig(level=logging.DEBUG)
        app.logger.setLevel(logging.DEBUG)
        app.logger.info('üöÄ URL Shortener ba≈ülatƒ±ldƒ± (Development Mode)')


class ProductionConfig(BaseConfig):
    """
    Production (Canlƒ±) ortamƒ± konfig√ºrasyonu
    
    G√ºvenlik maksimum, performans optimizasyonlarƒ±, minimal loglar.
    """
    
    DEBUG = False
    TESTING = False
    
    # Veritabanƒ± - Environment'tan al
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'database_prod.db')
    
    # SQLite i√ßin production optimizasyonlarƒ±
    SQLALCHEMY_ENGINE_OPTIONS = {
        'pool_timeout': 20,
        'pool_recycle': 3600,  # 1 saat
        'pool_pre_ping': True,
        'connect_args': {
            'check_same_thread': False,  # SQLite threading
            'timeout': 20  # Connection timeout
        }
    }
    
    # G√ºvenlik maksimum
    WTF_CSRF_ENABLED = True
    SESSION_COOKIE_SECURE = True  # HTTPS gerekli
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Strict'
    
    # Rate limiting aktif
    RATELIMIT_ENABLED = True
    RATELIMIT_DEFAULT = "50 per hour"  # Production'da daha katƒ±
    
    # Error handling
    PROPAGATE_EXCEPTIONS = False
    
    # Cache - Production'da Redis kullanƒ±labilir
    CACHE_TYPE = os.environ.get('CACHE_TYPE', 'simple')
    CACHE_REDIS_URL = os.environ.get('REDIS_URL')
    
    @staticmethod
    def init_app(app):
        """Production-specific initialization"""
        BaseConfig.init_app(app)
        
        # Production logging
        import logging
        from logging.handlers import RotatingFileHandler
        
        # File handler
        if not os.path.exists('logs'):
            os.mkdir('logs')
        
        file_handler = RotatingFileHandler(
            'logs/url_shortener.log',
            maxBytes=10240000,  # 10MB
            backupCount=10
        )
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
        ))
        file_handler.setLevel(logging.INFO)
        app.logger.addHandler(file_handler)
        app.logger.setLevel(logging.INFO)
        app.logger.info('üî• URL Shortener ba≈ülatƒ±ldƒ± (Production Mode)')


class TestingConfig(BaseConfig):
    """
    Testing (Test) ortamƒ± konfig√ºrasyonu
    
    Unit test ve integration test'ler i√ßin optimizasyon.
    """
    
    DEBUG = True
    TESTING = True
    
    # Test i√ßin in-memory database
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    
    # Test'ler i√ßin g√ºvenlik gev≈üek
    WTF_CSRF_ENABLED = False
    SESSION_COOKIE_SECURE = False
    
    # Rate limiting kapalƒ±
    RATELIMIT_ENABLED = False
    
    # Cache kapalƒ±
    CACHE_TYPE = "null"
    
    # Test i√ßin kƒ±sa kod uzunluƒüu
    SHORT_CODE_LENGTH = 4  # Test'lerde daha kƒ±sa
    
    @staticmethod
    def init_app(app):
        """Testing-specific initialization"""
        BaseConfig.init_app(app)
        
        # Test logging
        import logging
        logging.disable(logging.CRITICAL)  # Test'lerde log g√ºr√ºlt√ºs√º yok


# Environment bazƒ±nda config se√ßimi
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}


def get_config():
    """
    Environment variable'a g√∂re doƒüru config'i d√∂ner
    
    FLASK_ENV environment variable'ƒ±na bakar:
    - 'production' -> ProductionConfig
    - 'testing' -> TestingConfig
    - diƒüer/yoksa -> DevelopmentConfig (default)
    
    Returns:
        Config class: Uygun konfig√ºrasyon sƒ±nƒ±fƒ±
    """
    env = os.environ.get('FLASK_ENV', 'development').lower()
    return config.get(env, config['default'])


def validate_config(app):
    """
    Konfig√ºrasyonu validate eder ve eksik/hatalƒ± ayarlar i√ßin warning verir
    
    Args:
        app: Flask application instance
        
    Returns:
        list: Validation error/warning mesajlarƒ±
    """
    warnings = []
    
    # Secret key kontrol√º
    if app.config['SECRET_KEY'] == 'dev-secret-key':
        warnings.append("‚ö†Ô∏è  SECRET_KEY varsayƒ±lan deƒüerde! Production'da deƒüi≈ütirin.")
    
    # HTTPS kontrol√º (production)
    if not app.debug and not app.config.get('SESSION_COOKIE_SECURE'):
        warnings.append("‚ö†Ô∏è  Production'da HTTPS kullanƒ±n (SESSION_COOKIE_SECURE=True)")
    
    # Database URL kontrol√º
    db_url = app.config.get('SQLALCHEMY_DATABASE_URI', '')
    if 'sqlite:///:memory:' in db_url and not app.config.get('TESTING'):
        warnings.append("‚ö†Ô∏è  In-memory database production'da kullanƒ±lmamalƒ±!")
    
    # Rate limiting kontrol√º
    if not app.debug and not app.config.get('RATELIMIT_ENABLED'):
        warnings.append("‚ö†Ô∏è  Production'da rate limiting etkinle≈ütirin!")
    
    return warnings


# Development i√ßin .env dosyasƒ± √∂rneƒüi
ENV_EXAMPLE = """
# URL Shortener - Environment Variables √ñrneƒüi
# Bu dosyayƒ± .env olarak kopyalayƒ±n ve deƒüerleri g√ºncelleyin

# Flask ayarlarƒ±
FLASK_ENV=development
SECRET_KEY=your-super-secret-key-here

# Veritabanƒ±
DATABASE_URL=sqlite:///database.db
DEV_DATABASE_URL=sqlite:///database_dev.db

# Email (opsiyonel)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password

# Cache (opsiyonel)
CACHE_TYPE=simple
REDIS_URL=redis://localhost:6379/0

# Rate Limiting
RATELIMIT_ENABLED=true

# G√ºvenlik
WTF_CSRF_ENABLED=true
SESSION_COOKIE_SECURE=false
"""


if __name__ == "__main__":
    # Config test'i
    print("üîß Konfig√ºrasyon Test Ediliyor...\n")
    
    for env_name, config_class in config.items():
        if env_name == 'default':
            continue
        print(f"üìã {env_name.upper()} Config:")
        print(f"   DEBUG: {config_class.DEBUG}")
        print(f"   TESTING: {config_class.TESTING}")
        print(f"   DATABASE: {config_class.SQLALCHEMY_DATABASE_URI}")
        print(f"   SHORT_CODE_LENGTH: {config_class.SHORT_CODE_LENGTH}")
        print()
    
    print("‚úÖ T√ºm konfig√ºrasyonlar y√ºklendi!")